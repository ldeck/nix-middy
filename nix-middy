#!/usr/bin/env bash

CASK_API=https://formulae.brew.sh/api/cask

function echoerr {
  echo "$@" 1>&2;
}
function fail {
  echoerr "$1"
  exit 1
}
function usage {
  echo "Usage: $(basename 0) <cask> <outfile.nix>"
  exit $1
}

# ---------------------------------------------------
# step 1: validate script args
# ---------------------------------------------------

if [ "$#" -ne 2 ]; then
  usage 1
fi

CASK=$1
DEST=$2

REQUEST_URL="${CASK_API}/${CASK}.json"


echo "----------------"
echo "Start: $CASK"

JSON=

if curl --output /dev/null --silent --head --fail "${REQUEST_URL}"; then
  JSON=$(curl -s "${REQUEST_URL}")
else
  echoerr "No such cask"
  usage 1
fi


# ---------------------------------------------------
# step 2: extract app version
# ---------------------------------------------------
#
# nb: brew uses a weird method of combining 'version' and 'buildnumber'
#     into a 'version', often separated by comma, but sometimes by dot.
#     Why? No idea!
#
RAW_VERSION=$(echo "$JSON" | jq -r '.version')

IFS=', ' read -r -a versions <<< "${RAW_VERSION}"

INTEL_VERSION="${versions[0]}"
INTEL_REVISION=
INTEL_BUILDDATE=

if [[ "${#versions[@]}" -eq "3" ]]; then
  INTEL_BUILDDATE="${versions[1]}"
  INTEL_REVISION="${versions[2]}"
elif [[ "${#versions[@]}" -eq "2" ]]; then
  INTEL_BUILDDATE=""
  INTEL_REVISION="${versions[1]}"
fi

AARCH64_VERSION=$INTEL_VERSION
AARCH64_REVISION=$INTEL_REVISION
AARCH64_BUILDDATE=$INTEL_BUILDDATE

MAJOR_MINOR_VERSION=$(echo "${RAW_VERSION}" | perl -nle 'm/^(\d+\.\d+)?.*$/; print $1')
MAJOR_VERSION=$(echo "${RAW_VERSION}" | perl -nle 'm/^(\d+)?.*$/; print $1')

#
# verify we can reconstruct something like the raw version
#
[[ $RAW_VERSION =~ ^${INTEL_VERSION}(.${INTEL_BUILDDATE})?(.${INTEL_REVISION})?$ ]] || fail "Raw version ($RAW_VERSION) does not match (${INTEL_VERSION}.${INTEL_BUILDDATE}.${INTEL_REVISION})"

[[ $RAW_VERSION =~ ^${AARCH64_VERSION}(.${AARCH64_BUILDDATE})?(.${AARCH64_REVISION})?$ ]] || fail "Raw version ($RAW_VERSION) does not match (${AARCH64_VERSION}.${AARCH64_BUILDDATE}.${AARCH64_REVISION})"

# ---------------------------------------------------
# step 3: extract standard attributes
# ---------------------------------------------------

MACOS_NAME=$(VERSION=$(/usr/bin/sw_vers -productVersion | cut -d. -f1); curl -sfLS "https://support.apple.com/en-us/HT201260" | grep -B3 "<td>${VERSION}\." | sed 's/<[^>]*>//g' | grep -Ev '^[[:blank:]]*$' |  tr '[:upper:]' '[:lower:]' | tr ' ' '_' | sed 's/macos/arm64/' | grep arm64)

HOMEPAGE=$(echo "$JSON" | jq -r '.homepage')
DESCRIPTION=$(echo "$JSON" | jq -r '.desc')
SOURCEROOT=$(echo "$JSON" | jq -r 'try (.artifacts[] | .app | first) catch null' | grep -v null)
NAME="${SOURCEROOT%.app}"

INTEL_SHA256=$(echo "$JSON" | jq -r '.sha256')
INTEL_URL=$(echo "$JSON" | jq -r '.url')
TYPE=${INTEL_URL:(-3)}

# ---------------------------------------------------
# step 4: extract variation attributes for current os
# ---------------------------------------------------

AARCH64_SHA256=$(echo "$JSON" | jq -r ".variations.${MACOS_NAME}.sha256" | grep -v null)
if [[ -z "$AARCH64_SHA256" ]]; then
  AARCH64_SHA256="${INTEL_SHA256}"
fi

AARCH64_URL=$(echo "$JSON" | jq -r ".variations.${MACOS_NAME}.url" | grep -v null)
if [[ -z "$AARCH64_URL" ]]; then
  AARCH64_URL="${INTEL_URL}"
fi

# ---------------------------------------------------
# step 5: change url to nix interpolated version
# ---------------------------------------------------

# intel url interpolations

INTEL_URL=${INTEL_URL//${INTEL_VERSION}/\$\{cfg.version\}}

if ! [ -z "$MAJOR_MINOR_VERSION" ]; then
  INTEL_URL=${INTEL_URL//${MAJOR_MINOR_VERSION}/\$\{lib.versions.majorMinor cfg.version\}}
fi

# if ! [ -z "$MAJOR_VERSION" ]; then
#   INTEL_URL=${INTEL_URL//${MAJOR_VERSION}/\$\{lib.versions.major cfg.version\}}
# fi

if [[ ! -z "$INTEL_BUILDDATE" ]] && [[ "$INTEL_URL" == *"$INTEL_BUILDDATE"* ]]; then
  echo "Found Build${INTEL_BUILDDATE}Date"
  INTEL_URL=${INTEL_URL//${INTEL_BUILDDATE}/\$\{cfg.date\}}
fi

if [[ ! -z "$INTEL_REVISION" ]] && [[ "$INTEL_URL" == *"$INTEL_REVISION"* ]]; then
  echo "Found REVISION${INTEL_REVISION}NUMBER"
  INTEL_URL=${INTEL_URL//${INTEL_REVISION}/\$\{cfg.revision\}}
fi

#INTEL_URL=${INTEL_URL//amd64/\$\{cfg.arch\}}

# aarch64 url interpolations

AARCH64_URL=${AARCH64_URL//${AARCH64_VERSION}/\$\{cfg.version\}}

if ! [ -z "$MAJOR_MINOR_VERSION" ]; then
  AARCH64_URL=${AARCH64_URL//${MAJOR_MINOR_VERSION}/\$\{lib.versions.majorMinor cfg.version\}}
fi

# if ! [ -z "$MAJOR_VERSION" ]; then
#   AARCH64_URL=${AARCH64_URL//${MAJOR_VERSION}/\$\{lib.versions.major cfg.version\}}
# fi

if [[ ! -z "$AARCH64_BUILDDATE" ]] && [[ "$AARCH64_URL" == *"$AARCH64_BUILDDATE"* ]]; then
  echo "Found Build${AARCH64_BUILDDATE}Date"
  AARCH64_URL=${AARCH64_URL//${AARCH64_BUILDDATE}/\$\{cfg.date\}}
fi

if [[ ! -z "$AARCH64_REVISION" ]] && [[ "$AARCH64_URL" == *"$AARCH64_REVISION"* ]]; then
  echo "Found REVISION${AARCH64_REVISION}NUMBER"
  AARCH64_URL=${AARCH64_URL//${AARCH64_REVISION}/\$\{cfg.revision\}}
fi

# ---------------------------------------------------
# step 6: assign variables
# ---------------------------------------------------

PACKAGE_NAME="$NAME"
# PACKAGE_NAME=$(echo $NAME | awk '{print toupper(substr($0,0,1))substr($0,2)}')


# ---------------------------------------------------
# step 7: define essential template module
# ---------------------------------------------------

TEMPLATE=$(cat <<EOF
{ config, lib, pkgs, ... }:
with lib;

let
  cfg = config.macOS.apps.${CASK};
  stdenv = pkgs.stdenv;
  arch = if stdenv.isDarwin then stdenv.hostPlatform.darwinArch else stdenv.system;
  toHyphenedLower = str:
    (lib.strings.toLower (builtins.replaceStrings [" "] ["-"] str));

  archSpecs = {
    x86_64-darwin = {
      version = "${INTEL_VERSION}";
      revision = "${INTEL_REVISION}";
      date = "${INTEL_BUILDDATE}";
      arch = "amd64";
      url = "${INTEL_URL}";
      sha256 = "${INTEL_SHA256}";
    };
    aarch64-darwin = {
      version = "${AARCH64_VERSION}";
      revision = "${AARCH64_REVISION}";
      date = "${AARCH64_BUILDDATE}";
      arch = "arm64";
      url = "${AARCH64_URL}";
      sha256 = "${AARCH64_SHA256}";
    };
  };

in {
  options = {
    macOS.apps.${CASK} = {
      enable = mkOption {
        default = false;
        description = "Whether to enable this app.";
      };
      sourceRoot = mkOption {
        default = "${SOURCEROOT}";
        description = "The app folder name to recursively copy from the install archive. e.g., Foo.app";
      };
      version = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.version;
        description = "The version of the app.";
      };
      date = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.date;
        description = "The build date (if applicable).";
      };
      revision = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.revision;
        description = "The build number of the app (if applicable).";
      };
      url = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.url;
        description = "The url or url template for the archive.";
      };
      sha256 = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.sha256;
        description = "The sha256 for the app.";
      };
    };
  };
  config = mkIf cfg.enable {
    home.packages =
      (pkgs.callPackage ./lib/app.nix rec {
        name = "${PACKAGE_NAME}";
        description = "${DESCRIPTION}";
        sourceRoot = cfg.sourceRoot;
        version = cfg.version;
        src = pkgs.fetchurl {
          url = cfg.url;
          sha256 = cfg.sha256;
          name = "\${(toHyphenedLower name)}-\${arch}-\${version}.${TYPE}";
        };
        appcast = "${REQUEST_URL}";
        homepage = "${HOMEPAGE}";
      });
  };
}
EOF
)

# ---------------------------------------------------
# step 8: write resulting nix module
# ---------------------------------------------------

DEST_DIR=$(dirname "$DEST")
mkdir -p ${DEST_DIR}

echo "${TEMPLATE}" > $DEST

echo "Done"
