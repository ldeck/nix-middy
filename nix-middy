#!/usr/bin/env bash

CASK_API=https://formulae.brew.sh/api/cask

function echoerr {
  echo "$@" 1>&2;
}
function fail {
  echoerr "$1"
  exit 1
}
function usage {
  echo "Usage: $(basename 0) <cask> <outfile.nix>"
  exit $1
}

# ---------------------------------------------------
# step 1: validate script args
# ---------------------------------------------------

if [ "$#" -ne 2 ]; then
  usage 1
fi

CASK=$1
DEST=$2

REQUEST_URL="${CASK_API}/${CASK}.json"


echo "----------------"
echo "Start: $CASK"

JSON=

if curl --output /dev/null --silent --head --fail "${REQUEST_URL}"; then
  JSON=$(curl -s "${REQUEST_URL}")
else
  echoerr "No such cask"
  usage 1
fi


# ---------------------------------------------------
# step 2: extract app version
# ---------------------------------------------------
#
# nb: brew uses a weird method of combining 'version' and 'buildnumber'
#     into a 'version', often separated by comma, but sometimes by dot.
#     Why? No idea!
#
RAW_VERSION=$(echo "$JSON" | jq -r '.version')

IFS=', ' read -r -a versions <<< "${RAW_VERSION}"

VERSION="${versions[0]}"
REVISION=
BUILDDATE=

if [[ "${#versions[@]}" -eq "3" ]]; then
  BUILDDATE="${versions[1]}"
  REVISION="${versions[2]}"
elif [[ "${#versions[@]}" -eq "2" ]]; then
  BUILDDATE=""
  REVISION="${versions[1]}"
fi


MAJOR_MINOR_VERSION=$(echo "${RAW_VERSION}" | perl -nle 'm/^(\d+\.\d+)?.*$/; print $1')
# VERSION=$(echo "${RAW_VERSION}" | perl -nle 'm/^(\d+(\.\d+){0,2}).*$/; print $1')

# REVISION=
# if (( ${#RAW_VERSION} - ${#VERSION} > 1 )); then
#   REVISION=$(echo "${RAW_VERSION}" | perl -nle "m/^${VERSION}.(.*)$/; print \$1")
#   echo "REVISION: $REVISION from $RAW_VERSION"
# fi


#
# verify we can reconstruct something like the raw version
#
[[ $RAW_VERSION =~ ^${VERSION}(.${BUILDDATE})?(.${REVISION})?$ ]] || fail "Raw version ($RAW_VERSION) does not match (${VERSION}.${BUILDDATE}.${REVISION})"


# ---------------------------------------------------
# step 3: extract standard attributes
# ---------------------------------------------------

NAME=$(echo "$JSON" | jq -r '.token')
HOMEPAGE=$(echo "$JSON" | jq -r '.homepage')
DESCRIPTION=$(echo "$JSON" | jq -r '.desc')
SHA256=$(echo "$JSON" | jq -r '.sha256')
SOURCEROOT=$(echo "$JSON" | jq -r 'try (.artifacts[] | .app | first) catch null' | grep -v null)
URL=$(echo "$JSON" | jq -r '.url')
TYPE=${URL:(-3)}

ARM64SHA256=$(echo "$JSON" | jq -r '.variations.arm64_monterey.sha256' | grep -v null)
if [[ -z "$ARM64SHA256" ]]; then
  ARM64SHA256="${SHA256}"
fi


# ---------------------------------------------------
# step 4: change url to nix interpolated version
# ---------------------------------------------------

URL=${URL//${VERSION}/\$\{cfg.version\}}

if ! [ -z "$MAJOR_MINOR_VERSION" ]; then
  URL=${URL//${MAJOR_MINOR_VERSION}/\$\{lib.versions.majorMinor cfg.version\}}
fi

if [[ ! -z "$BUILDDATE" ]] && [[ "$URL" == *"$BUILDDATE"* ]]; then
  echo "Found Build${BUILDDATE}Date"
  URL=${URL//${BUILDDATE}/\$\{cfg.date\}}
fi


if [[ ! -z "$REVISION" ]] && [[ "$URL" == *"$REVISION"* ]]; then
  echo "Found REVISION${REVISION}NUMBER"
  URL=${URL//${REVISION}/\$\{cfg.revision\}}
fi


# ---------------------------------------------------
# step 5: assign variables
# ---------------------------------------------------

PACKAGE_NAME=$(echo $NAME | awk '{print toupper(substr($0,0,1))substr($0,2)}')


# ---------------------------------------------------
# step 6: define essential template module
# ---------------------------------------------------

TEMPLATE=$(cat <<EOF
{ config, lib, pkgs, ... }:
with lib;

let
  cfg = config.macOS.apps.${CASK};
  stdenv = pkgs.stdenv;
  arch = if stdenv.isDarwin then stdenv.hostPlatform.darwinArch else stdenv.system;
  toHyphenedLower = str:
    (lib.strings.toLower (builtins.replaceStrings [" "] ["-"] str));

  archSpecs = {
    x86_64-darwin = {
      version = "${VERSION}";
      revision = "${REVISION}";
      arch = "amd64";
      sha256 = "${SHA256}";
    };
    aarch64-darwin = {
      version = "${VERSION}";
      revision = "${REVISION}";
      arch = "arm64";
      sha256 = "${ARM64SHA256}";
    };
  };

in {
  options = {
    macOS.apps.${CASK} = {
      enable = mkOption {
        default = false;
        description = "Whether to enable this app.";
      };
      sourceRoot = mkOption {
        default = "${SOURCEROOT}";
        description = "The app folder name to recursively copy from the install archive. e.g., Foo.app";
      };
      version = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.version;
        description = "The version of the app.";
      };
      date = mkOption {
        default = "${BUILDDATE}";
        description = "The build date (if applicable).";
      };
      revision = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.revision;
        description = "The build number of the app (if applicable).";
      };
      sha256 = mkOption {
        default = archSpecs.\${stdenv.hostPlatform.system}.sha256;
        description = "The sha256 for the app.";
      };
    };
  };
  config = mkIf cfg.enable {
    home.packages =
      (pkgs.callPackage ./lib/app.nix rec {
        name = "${PACKAGE_NAME}";
        description = "${DESCRIPTION}";
        sourceRoot = cfg.sourceRoot;
        version = cfg.version;
        src = pkgs.fetchurl {
          url = "${URL}";
          sha256 = cfg.sha256;
          name = "\${(toHyphenedLower name)}-\${arch}-\${version}.${TYPE}";
        };
        appcast = "${REQUEST_URL}";
        homepage = "${HOMEPAGE}";
      });
  };
}
EOF
)

# ---------------------------------------------------
# step 7: write resulting nix module
# ---------------------------------------------------

DEST_DIR=$(dirname "$DEST")
mkdir -p ${DEST_DIR}

echo "${TEMPLATE}" > $DEST

echo "Done"
